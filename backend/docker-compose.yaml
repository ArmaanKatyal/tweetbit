version: '3.4'
services:
  db:
    image: 'postgres:14.1-alpine'
    container_name: postgres1
    hostname: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    volumes:
      - 'db:/var/lib/postgresql/data'
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.3.0'
    hostname: zookeeper
    container_name: zookeeper1
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "zookeeper-shell", "localhost:2181", "ls", "/"]
  broker:
    image: 'confluentinc/cp-kafka:7.3.0'
    hostname: broker
    container_name: broker1
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
      - '9093:9093'
      - '9101:9101'
    expose:
      - '9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'INSIDE://broker:9092,OUTSIDE://localhost:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENERS: 'INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "broker:9092", "--list"]

  mongodb:
    image: mongo:6.0.3
    container_name: mongo1
    hostname: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_PACKAGE: mongodb-org
      MONGO_REPO: repo.mongodb.org
      MONGO_MAJOR: 6.0
      MONGO_VERSION: 6.0.3
      HOME: /data/db
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - 'mongodb:/data/db'

  redis:
    image: redis:7.0.7-alpine
    container_name: redis1
    hostname: redis
    ports:
      - '6379:6379'
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
    volumes:
      - 'redis:/data'

  elasticsearch_some:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: elasticsearch1
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_CONTAINER=true
    ports:
      - '9200:9200'
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]

  jaeger:
    image: jaegertracing/all-in-one:1.46
    container_name: jaeger1
    hostname: jaeger
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '14268:14268'
      - '9411:9411'
    restart: always
    volumes:
      - 'jaeger:/tmp'

  grafana:
    image: grafana/grafana-enterprise:9.5.3
    container_name: grafana1
    restart: unless-stopped
    hostname: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SERVER_ROOT_URL=http://my.grafana.server/
    volumes:
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus1
    restart: unless-stopped
    hostname: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  usergraphservice:
    build:
      context: userGraphService
      dockerfile: ./Dockerfile
    container_name: usergraphservice
    hostname: usergraphservice
    depends_on:
      broker:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started

  # search_service:
  #   build:
  #     context: searchService
  #     dockerfile: ./Dockerfile
  #   container_name: search_service
  #   ports:
  #     - '5000:5000'
  #   depends_on:
  #     - broker
  #     - zookeeper
  #     - elasticsearch_some
  #     - jaeger

volumes:
  db:
    driver: local
  redis:
    driver: local
  jaeger:
    driver: local
  mongodb:
    driver: local
  grafana_data: {}
